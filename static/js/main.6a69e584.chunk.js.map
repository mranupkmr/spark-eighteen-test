{"version":3,"sources":["redux/reducers/index.js","redux/reducers/home.js","constants/actionTypes.js","redux/store/index.js","components/Header.js","components/HomeLeft.js","components/HomeRight.js","components/Home.js","redux/actions/home.js","App.js","serviceWorker.js","index.js"],"names":["combineReducers","home","state","countries","Portugal","name","checked","Nicaragua","Marshall","action","type","Object","assign","payload","store","createStore","rootReducer","Header","Navbar","bg","variant","className","Brand","href","Nav","Link","HomeLeft","props","Card","Body","dataArr","keys","forEach","item","push","key","children","parent","childArr","idx","value","onChange","e","handleChange","renderChildren","renderCountries","HomeRight","result","childItem","Alert","dismissible","onClose","handleRemove","length","Home","target","changeCountry","obj","console","log","this","Container","React","Component","connect","dispatch","data","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qPAGeA,kBAAgB,CAC9BC,KCAc,WAsBb,IArBDC,EAqBA,uDArBQ,CACPC,UAAU,CACAC,SAAS,CACL,CAACC,KAAK,kBAAkBC,SAAQ,GAChC,CAACD,KAAK,mBAAmBC,SAAQ,GACjC,CAACD,KAAK,eAAeC,SAAQ,GAC7B,CAACD,KAAK,gBAAgBC,SAAQ,IAElCC,UAAU,CACN,CAACF,KAAK,kBAAkBC,SAAQ,GAChC,CAACD,KAAK,eAAeC,SAAQ,GAC7B,CAACD,KAAK,QAAQC,SAAQ,GACtB,CAACD,KAAK,WAAWC,SAAQ,IAE7BE,SAAS,CACL,CAACH,KAAK,QAAQC,SAAQ,GACtB,CAACD,KAAK,SAASC,SAAQ,MAItCG,EACA,uCACA,OAAOA,EAAOC,MACb,IC5B2B,gBD6B1B,OAAOC,OAAOC,OAAO,GAAGV,EAAM,CAACC,UAAUM,EAAOI,UACjD,QACC,OAAOX,ME1BKY,EAFDC,YAAYC,G,sECCX,SAASC,IACpB,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,QAAQC,UAAU,kBACzC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,QACA,kBAACC,EAAA,EAAD,CAAKH,UAAU,WACX,kBAACG,EAAA,EAAIC,KAAL,CAAUF,KAAK,SAAf,QACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,cAAf,gBAGA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,YAAf,WACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,eAAf,kB,YCVD,SAASG,EAASC,GA0B7B,OACI,yBAAKN,UAAU,sBACX,kBAACO,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KAhBY,WAAO,IACpB1B,EAAawB,EAAbxB,UACH2B,EAAU,GASd,OARAnB,OAAOoB,KAAK5B,GAAW6B,SAAQ,SAACC,GAC5BH,EAAQI,KACJ,wBAAIC,IAAKF,GACJA,EAlBM,SAACG,EAASC,GAC7B,IAAIC,EAAW,GASf,OARAF,EAASJ,SAAQ,SAACC,EAAKM,GACnBD,EAASJ,KACT,wBAAIC,IAAKF,EAAK5B,MACV,2BAAOK,KAAK,WAAWL,KAAMgC,EAAQG,MAAOP,EAAK5B,KAAMC,QAAS2B,EAAK3B,QAASmC,SAAU,SAAAC,GAAC,OAAIf,EAAMgB,aAAaD,EAAEH,MAChHN,EAAK5B,UAIRiC,EASMM,CAAezC,EAAU8B,GAAMA,QAIrCH,EAMMe,M,YC9BN,SAASC,EAAUnB,GA2B9B,OACI,yBAAKN,UAAU,sBACX,kBAACO,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KA7BY,WAAO,IACpB1B,EAAawB,EAAbxB,UACHmC,EAAW,GACXS,EAAS,GAqBb,OApBApC,OAAOoB,KAAK5B,GAAW6B,SAAQ,SAACC,GAC5BK,EAAW,GACXnC,EAAU8B,GAAMD,SAAQ,SAACgB,EAAUT,GAC5BS,EAAU1C,SACTgC,EAASJ,KACL,kBAACe,EAAA,EAAD,CAAOd,IAAG,UAAKa,EAAU3C,KAAf,YAAuBkC,GAAOnB,QAAQ,OAAO8B,aAAW,EAACC,QAAS,kBAAMxB,EAAMyB,aAAa,CAAC,KAAOnB,EAAK,SAAU,GAAOM,KAC9HS,EAAU3C,UAKxBiC,EAASe,OAAO,GACfN,EAAOb,KACH,wBAAIC,IAAKF,GACJA,EACAK,OAKVS,EAMEF,M,IC3BXS,E,4MACFX,aAAe,SAACD,EAAEH,GAAS,IAAD,EACCG,EAAEa,OAAlBlD,EADe,EACfA,KAAKC,EADU,EACVA,QACPH,EAAa,EAAKwB,MAAM2B,KAAxBnD,UACLA,EAAUE,GAAMkC,GAAhB,QAAgCjC,EAChC,EAAKqB,MAAM6B,cAAcrD,I,EAE7BiD,aAAe,SAACK,EAAIlB,GAAS,IAClBlC,EAAgBoD,EAAhBpD,KAAKC,EAAWmD,EAAXnD,QACPH,EAAa,EAAKwB,MAAM2B,KAAxBnD,UACLuD,QAAQC,IAAItD,EAAKC,GACjBH,EAAUE,GAAMkC,GAAhB,QAAgCjC,EAChC,EAAKqB,MAAM6B,cAAcrD,I,uDAEnB,IACCA,EAAayD,KAAKjC,MAAM2B,KAAxBnD,UACP,OACI,oCACI,kBAACc,EAAD,MACA,kBAAC4C,EAAA,EAAD,KACI,yBAAKxC,UAAU,iBACX,kBAACK,EAAD,CAAUvB,UAAWA,EAAWwC,aAAciB,KAAKjB,eACnD,kBAACG,EAAD,CAAW3C,UAAWA,EAAWiD,aAAcQ,KAAKR,sB,GAtBzDU,IAAMC,WAuCVC,eALS,SAAA9D,GACpB,MAAM,CACFoD,KAAMpD,EAAMD,SAPO,SAAAgE,GACvB,MAAM,CACFT,cAAe,SAAAU,GAAI,OAAID,ECnChB,SAAuBC,GAClC,MAAM,CACFxD,KNNqB,gBMOrBG,QAAQqD,GDgCwBV,CAAcU,QAQvCF,CAA4CV,GErC5Ca,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,CAAU5D,MAAOA,GACb,kBAAC,EAAD,OAEJ6D,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.6a69e584.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\r\nimport home from \"./home\";\r\n\r\nexport default combineReducers({\r\n\thome: home\r\n});","import {\r\n\tHANDLE_CHANGE\r\n} from \"../../constants/actionTypes\";\r\n\r\nexport default function Home(\r\n\tstate = {\r\n\t\tcountries:{\r\n            Portugal:[\r\n                {name:\"Aasiya Jayavant\",checked:false},\r\n                {name:\"Luvleen Lawrence\",checked:false},\r\n                {name:\"Rey Mibourne\",checked:false},\r\n                {name:\"Cayla Brister\",checked:false}\r\n            ],\r\n            Nicaragua:[\r\n                {name:\"Deveedaas Nandi\",checked:false},\r\n                {name:\"Obasey Chidy\",checked:false},\r\n                {name:\"Xenie\",checked:false},\r\n                {name:\"Ezequiel\",checked:false}\r\n            ],\r\n            Marshall:[\r\n                {name:\"Aaron\",checked:false},\r\n                {name:\"Jelena\",checked:false},\r\n            ]\r\n        }\r\n\t},\r\n\taction\r\n){\r\n\tswitch(action.type){\r\n\t\tcase HANDLE_CHANGE:\r\n\t\t\treturn Object.assign({},state,{countries:action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n\t\r\n}","export const HANDLE_CHANGE = \"HANDLE_CHANGE\";","import { createStore } from 'redux';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\n\r\nexport default function Header() {\r\n    return (\r\n        <Navbar bg=\"light\" variant=\"light\" className=\"full-width-nav\">\r\n            <Navbar.Brand href=\"#home\">LOGO</Navbar.Brand>\r\n            <Nav className=\"ml-auto\">\r\n                <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                <Nav.Link href=\"#portfolio\">\r\n                    My Portfolio\r\n                </Nav.Link>\r\n                <Nav.Link href=\"#clients\">Clients</Nav.Link>\r\n                <Nav.Link href=\"#getintouch\">Get in touch</Nav.Link>\r\n            </Nav>\r\n        </Navbar>\r\n    );\r\n}","import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\n\r\nexport default function HomeLeft(props) {\r\n    const renderChildren = (children,parent) => {\r\n        let childArr = [];\r\n        children.forEach((item,idx) => {\r\n            childArr.push(\r\n            <li key={item.name}>\r\n                <input type=\"checkbox\" name={parent} value={item.name} checked={item.checked} onChange={e => props.handleChange(e,idx)}/>              \r\n                 {item.name} \r\n            </li>\r\n            );\r\n        });\r\n        return childArr;\r\n    }\r\n    const renderCountries = () => {\r\n        const {countries} = props;\r\n        let dataArr = [];\r\n        Object.keys(countries).forEach((item) => {\r\n            dataArr.push(\r\n                <ul key={item}>\r\n                    {item}\r\n                    {renderChildren(countries[item],item)}\r\n                </ul>\r\n            );\r\n        });\r\n        return dataArr;\r\n    }\r\n    return (\r\n        <div className=\"body-left col-md-6\">\r\n            <Card>\r\n                <Card.Body>\r\n                    {renderCountries()}\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { Alert, Card } from \"react-bootstrap\";\r\n\r\n\r\nexport default function HomeRight(props) {\r\n    const renderCountries = () => {\r\n        const {countries} = props;\r\n        let childArr = [];\r\n        let result = [];\r\n        Object.keys(countries).forEach((item) => {\r\n            childArr = [];\r\n            countries[item].forEach((childItem,idx) => {\r\n                if(childItem.checked){\r\n                    childArr.push(\r\n                        <Alert key={`${childItem.name}_${idx}`} variant=\"dark\" dismissible onClose={() => props.handleRemove({\"name\":item,\"checked\":false},idx)}>\r\n                            {childItem.name}\r\n                        </Alert>\r\n                    )\r\n                }\r\n            });\r\n            if(childArr.length>0){\r\n                result.push(\r\n                    <ul key={item}>\r\n                        {item}\r\n                        {childArr}\r\n                    </ul>\r\n                )\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    return (\r\n        <div className=\"body-left col-md-6\">\r\n            <Card>\r\n                <Card.Body>\r\n                {renderCountries()}\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Header from \"./Header\";\r\nimport HomeLeft from \"./HomeLeft\";\r\nimport changeCountry from \"../redux/actions/home\";\r\nimport { connect } from \"react-redux\";\r\nimport HomeRight from \"./HomeRight\";\r\n\r\nclass Home extends React.Component {\r\n    handleChange = (e,idx) => {\r\n        const {name,checked} = e.target;\r\n        let {countries} = this.props.Home;\r\n        countries[name][idx][\"checked\"]=checked\r\n        this.props.changeCountry(countries);\r\n    }\r\n    handleRemove = (obj,idx) => {\r\n        const {name,checked} = obj;\r\n        let {countries} = this.props.Home;\r\n        console.log(name,checked)\r\n        countries[name][idx][\"checked\"]=checked\r\n        this.props.changeCountry(countries);\r\n    }\r\n    render() {\r\n        const {countries} = this.props.Home;\r\n        return (\r\n            <>\r\n                <Header />\r\n                <Container>\r\n                    <div className=\"home-body row\">\r\n                        <HomeLeft countries={countries} handleChange={this.handleChange}/>\r\n                        <HomeRight countries={countries} handleRemove={this.handleRemove}/>\r\n                    </div>\r\n                </Container>\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        changeCountry: data => dispatch(changeCountry(data))\r\n    };\r\n};\r\nconst mapStateToProps = state => {\r\n    return{\r\n        Home: state.home\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);\r\n","import {\r\n\tHANDLE_CHANGE\r\n} from \"../../constants/actionTypes\";\r\n\r\nexport default function changeCountry(data){\r\n    return{\r\n        type: HANDLE_CHANGE,\r\n        payload:data\r\n    }\r\n}","import React from 'react';\r\nimport Home from \"./components/Home\"\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Home />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}